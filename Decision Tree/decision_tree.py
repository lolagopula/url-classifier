# -*- coding: utf-8 -*-
"""decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14O9yh33QZXuB3LskZeq0_CU6WBFBBeEP
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv('kaggle.csv')

# Split the dataset into features and labels
X = df.iloc[:, 2:].values  # Assuming the features start from the third column
y = df['Label'].values
 #Split the dataset into features and labels
#X = df.iloc[:, :-1].values
#y = df.iloc[:, -1].values

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Encode the features using LabelEncoder
'''label_encoder = LabelEncoder()
for column in X.columns:
    if X[column].dtype == 'object':
        X[column] = label_encoder.fit_transform(X[column].astype(str))

# Encode the labels using LabelEncoder
y = label_encoder.fit_transform(y)'''


# Initialize the decision tree classifier
clf = DecisionTreeClassifier(max_depth=200, criterion='gini', splitter='best')

# Train the model
clf.fit(X_train, y_train)

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
import matplotlib.pyplot as plt

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
# Obtain the confusion matrix on the testing data
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

# Calculate the accuracy score on the testing data
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Perform cross-validation on the training data
cv_scores = cross_val_score(clf, X_train, y_train, cv=5)
print("Cross-Validation Scores:")
print(cv_scores)
print("Average Accuracy:", cv_scores.mean())

# Evaluate the model
accuracy_value = accuracy_score(y_test, y_pred)
classification_report_str = classification_report(y_test, y_pred, digits=5)

# Print the results
print(f'Accuracy: {accuracy_value:.5f}')
print(f'Classification Report:\n{classification_report_str}')